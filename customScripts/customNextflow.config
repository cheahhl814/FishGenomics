// Parameters (Pre-assembly)
params.fastq = "${launchDir}/nanoporeReads/*.fasta" // Input WGS long read fastq/fasta files
params.conFiles = "${launchDir}/contaminants.tsv" // Contaminant reference database
params.resultDir = "./results" // Directory for all results

// Parameters (Mitogenome assembly)
params.refmtDNA = "${launchDir}/referenceMt/*.fasta" // Mitochondria reference sequences (FASTA) of closely related species
params.firstGene = "${launchDir}/referenceMt/COI.fasta" // FASTA sequences of genes to use as start point
params.orthoMt = "${launchDir}/orthofinderMt" // Input folder for Orthofinder

// Parameters (Assembly)
params.sample_id = "BH004"
params.genomeSize = "650m"
params.reference_genome = "${launchDir}/referenceGenome/*.fna" // Reference genome of a closely related species

// Parameters (Reconciliation)
params.firstA = ""
params.secondA = ""
params.thirdA = ""
params.fourthA = ""
params.fifthA = ""

// Parameters (Annotation)
params.finalAsm = "${launchDir}/finalAssembly/*.fasta" // Final assembly after reconciliation
params.species = "Betta hipposideros"
params.buscodb = "actinopterygii"

process {
    // Resource allocation
    cpus = Runtime.getRuntime().availableProcessors()
	memory = (Runtime.getRuntime().maxMemory() / (1024 * 1024 * 1024)).GB

    // Process-specific configurations
    withName:flye {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate flye
        """
    }
    withName:raven {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate raven
        """
    }
    withName:shasta {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate shasta
        """
    }
    withName:racon {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate racon
        """
    }
    withName:quast {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate quast
        """
    }
    withName:multiqc {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate preassembly
        """
    }
    withName:nanoplot {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate preassembly
        """
    }
    withName:porechop {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate preassembly
        """
    }
    withName:filtlong {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate preassembly
        """
    }
    withName:scaffold {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate reconciliation
        """
    }
    withName:patch {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate reconciliation
        """
    }
    withName:scaffold2 {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate reconciliation
        """
    }
    withName:quickmerge {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate reconciliation
        """
    }
    withName:ganonClassify {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate decon
        """
    }
    withName:decon {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate decon
        """
    }
    withName:identifymtDNA {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate decon
        """
    }
    withName:segregateReads {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate decon
        """
    }
    withName:mtAssembly {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate flye
        """
    }
    withName:mtPolish {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate racon
        """
    }
    withName:mtCircular {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate circlator
        """
    }
    withName:mtOrtho {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate orthofinder
        """
    }
    withName:trimMSA {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate trimal
        """
    }
    withName:mtTree {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate raxmlng
        """
    }
    withName:flye {
        executor = 'local'
        beforeScript = """
        eval "\$(micromamba shell hook --shell bash)"
        micromamba activate flye
        """
    }
    withName:canu {
        executor = 'slurm'
        clusterOptions = '--partition=cpu1,cpu2,cpu1.medm,cpu1.largem,cpu2.largem --job-name=assemblyCanu --mem=64G --cpus-per-task=16 --time=72:00:00'
        beforeScript = """
        module load canu
        """
    }
    withName:wtdbg2 {
        executor = 'slurm'
        clusterOptions = '--partition=cpu1,cpu2,cpu1.medm,cpu1.largem,cpu2.largem --job-name=assemblyWtdbg2 --mem=64G --cpus-per-task=16 --time=72:00:00'
        beforeScript = """
        module load wtdbg2
        """
    }
    withName:busco {
        executor = 'slurm'
        clusterOptions = '--partition=cpu1,cpu2,cpu1.medm,cpu1.largem,cpu2.largem --job-name=busco --mem=64G --cpus-per-task=16 --time=72:00:00'
        beforeScript = """
        module load busco
        """
    }
    withName:galignment {
        executor = 'slurm'
        clusterOptions = '--partition=cpu1,cpu2,cpu1.medm,cpu1.largem,cpu2.largem --job-name=genomeAlignment --mem=64G --cpus-per-task=16 --time=72:00:00'
        beforeScript = """
        module load mummer
        """
    }
    withName:mtAnnotate {
        executor = 'slurm'
        clusterOptions = '--partition=cpu1,cpu2,cpu1.medm,cpu1.largem,cpu2.largem --job-name=mtAnnotate --mem=64G --cpus-per-task=16 --time=72:00:00'
        beforeScript = """
        module load prokka
        """
    }
}

// Enable conda (micromamba) integration
conda {
    enabled = true
    useMicromamba = true
    cacheDir = "$HOME/micromamba"
    micromambaPath = "$HOME/.local/bin/micromamba"
}